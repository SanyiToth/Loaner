<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1068794_loaner.HampLoanerAjaxUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>HampLoanerAjaxUtils</name>
        <script><![CDATA[var HampLoanerAjaxUtils = Class.create();
HampLoanerAjaxUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    validateDates: function() {
        var MAX_MONTHS_START_DATE = 3; // Allow reservations with start date within 3 months
        var MAX_MONTHS_RETURN_DATE = 6; // Allow reservations with return date within 6 months from start date

        var startDateUserFormat = this.getParameter('sysparm_startdate');
        var startDate = HAMUtils.getDateInInternalFormat(startDateUserFormat);
        var returnDateUserFormat = this.getParameter('sysparm_returndate');
        var returnDate = HAMUtils.getDateInInternalFormat(returnDateUserFormat);

        var gDate = new GlideDateTime();
        var currentDate = gDate.getLocalDate();
        var res = {};
        var sdt;
        if (!gs.nil(startDate)) {
            sdt = new GlideDateTime(startDate);
            var cdt = new GlideDateTime(currentDate);
            var maxsdt = new GlideDateTime(currentDate);
            maxsdt.addMonthsUTC(MAX_MONTHS_START_DATE);
            if (sdt.before(cdt)) {
                res.isStartDateValid = false;
                res.startDateErrorMsg = gs.getMessage(
                    '{0} is not valid. Select a start date on or after current date!', [startDate]
                );
            } else if (sdt.after(maxsdt)) {
                res.isStartDateValid = false;
                res.startDateErrorMsg = gs.getMessage(
                    '{0} is not valid. Select a start date within {1} months from current date!',
                    [startDate, String(MAX_MONTHS_START_DATE)]
                );
            } else {
                res.isStartDateValid = true;
            }
        }
        if (!gs.nil(returnDate)) {
            sdt = new GlideDateTime(startDate);
            var rdt = new GlideDateTime(returnDate);
            var maxrdt = new GlideDateTime(startDate);
            maxrdt.addMonthsUTC(MAX_MONTHS_RETURN_DATE);
            if (rdt.onOrBefore(sdt)) {
                res.isReturnDateValid = false;
                res.returnDateErrorMsg = gs.getMessage(
                    '{0} is not valid. Select a return date after the selected start date!', [returnDate]
                );
            } else if (rdt.after(maxrdt)) {
                res.isReturnDateValid = false;
                res.returnDateErrorMsg = gs.getMessage(
                    '{0} is not valid. Select a return date within {1} months from the selected start date!',
                    [returnDate, String(MAX_MONTHS_RETURN_DATE)]
                );
            } else {
                res.isReturnDateValid = true;
            }
        }
        return JSON.stringify(res);
    },

    getAllLoanerModels: function() {
        var allModels = [];
        var modelCount = 0;
        var assetsGa = new GlideAggregate('alm_asset');
        assetsGa.addQuery('stockroom.name', 'Domat/Ems').addOrCondition('stockroom.name', 'Bonaduz');
        // assetsGa.addQuery('install_status', 6);
        assetsGa.setGroup(true);
        assetsGa.groupBy('model.sys_id');
        assetsGa.query();
        while (assetsGa.next()) {
            allModels.push(assetsGa.getValue('model.sys_id'));
        }
        gs.info('modelCount' + this.getAllLoanerModelsCount());
        return allModels;
    },
	
    getAllLoanerModelsCount: function() {
        var modelCount = 0;
        var assetsGr = new GlideRecord('alm_asset');
        assetsGr.addQuery('stockroom.name', 'Domat/Ems').addOrCondition('stockroom.name', 'Bonaduz');
        // assetsGr.addQuery('install_status', 6);
        assetsGr.query();
        while (assetsGr.next()) {
            if (assetsGr.model.sys_id) {
                modelCount++;
            }
        }
        return modelCount;
    },


    getAllLoanerModelsInUse: function(startDate, returnDate) {
        var modelsInUse = [];
        var assetsGa = new GlideAggregate('x_1068794_loaner_asset_order');
        assetsGa.addQuery('start_date', '<=', returnDate);
        assetsGa.addQuery('return_date', '>=', startDate);
        assetsGa.setGroup(true);
        assetsGa.groupBy('model.sys_id');
        assetsGa.query();
        while (assetsGa.next()) {
            modelsInUse.push(assetsGa.getValue('model.sys_id'));
        }
        gs.info('DEBUG modelsInUse>>>' + modelsInUse);
        return modelsInUse;
    },

    compareArrays: function(allModels, modelsInUse) {
        var difference = [];
        for (var i = 0; i < allModels.length; i++) {
            if (modelsInUse.indexOf(allModels[i]) === -1) {
                difference.push(allModels[i]);
            }
        }
        return difference;
    },

    getAvailableLoanerModels: function(startDate, returnDate) {
        var filter;
        var allModels = this.getAllLoanerModels();
        var modelsInUse = this.getAllLoanerModelsInUse(startDate, returnDate);
        filter = 'sys_idIN' + this.compareArrays(allModels, modelsInUse);
        return filter;
    },

    getAvailableStockrooms: function(modelDisplayName) {
        var filter;
        var stockroomsarray = [];
        var assetsGa = new GlideAggregate('alm_asset');
        assetsGa.addQuery('model.display_name', modelDisplayName)
        assetsGa.setGroup(true);
        assetsGa.groupBy('stockroom.sys_id');
        assetsGa.query();
        while (assetsGa.next()) {
            stockroomsarray.push(assetsGa.getValue('stockroom.sys_id'));
        }
        filter = 'sys_idIN' + stockroomsarray;
        return filter;
    },

    type: 'HampLoanerAjaxUtils',
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-08-22 11:12:11</sys_created_on>
        <sys_id>1094027d97f47110db793dafe153af01</sys_id>
        <sys_mod_count>40</sys_mod_count>
        <sys_name>HampLoanerAjaxUtils</sys_name>
        <sys_package display_value="Loaner" source="x_1068794_loaner">5a84b41697247110db793dafe153af8b</sys_package>
        <sys_policy/>
        <sys_scope display_value="Loaner">5a84b41697247110db793dafe153af8b</sys_scope>
        <sys_update_name>sys_script_include_1094027d97f47110db793dafe153af01</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-08-22 15:23:12</sys_updated_on>
    </sys_script_include>
</record_update>
